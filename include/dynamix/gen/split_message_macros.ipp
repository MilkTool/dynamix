// DynaMix
// Copyright (c) 2013-2019 Borislav Stanimirov, Zahary Karadjov
//
// Distributed under the MIT Software License
// See accompanying file LICENSE.txt or copy at
// https://opensource.org/licenses/MIT
//
// this file is automatically generated by a script
//


#define I_DYNAMIX_MESSAGE0_DECL(export, message_name, method_name, return_type, constness, message_mechanism ) \
    /* mechanism shows whether it's a multicast or unicast */ \
    \
    /* step 1: define the message struct */ \
    struct export I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name) : public ::dynamix::internal::I_DYNAMIX_MESSAGE_CALLER_STRUCT(message_mechanism) \
        <I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name), constness ::dynamix::object, return_type > \
    { \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)() \
            : I_DYNAMIX_MESSAGE_CALLER_STRUCT(message_mechanism)(I_DYNAMIX_PP_STRINGIZE(message_name)) \
        {} \
        template <typename Mixin> \
        ::dynamix::internal::func_ptr get_caller_for() const \
        { \
            /* prevent the linker from optimizing away the caller function */ \
            static caller_func the_caller = [](void* _d_mixin ) -> return_type \
            { \
                constness Mixin* _d_m = reinterpret_cast<Mixin*>(_d_mixin); \
                return _d_m->method_name(); \
            }; \
            /* cast the caller to a void (*)() - safe according to the standard */ \
            return reinterpret_cast< ::dynamix::internal::func_ptr>(the_caller); \
        } \
    }; \
    /* step 2: define a message tag, that will be used to identify the message in feature lists */ \
    /* it would have been nice if we could set this global variable to the unique global instance of the feature*/ \
    /* but unfortunately we cannot trust dynamic libraries to keep it straight for us */ \
    /* hence we rely on a getter like the mixin one */ \
    extern export I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name) * I_DYNAMIX_MESSAGE_TAG(message_name); \
    /* step 3: declare the feature getter and manual registrator for the message */ \
    extern export ::dynamix::feature& _dynamix_get_mixin_feature_safe(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \
    extern export const ::dynamix::feature& _dynamix_get_mixin_feature_fast(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \
    extern export void _dynamix_register_mixin_feature(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \

#if !defined(DYNAMIX_SPLIT_MESSAGE_DEFINE)

#define I_DYNAMIX_MESSAGE0_UNI(export, message_name, method_name, return_type, constness ) \
    I_DYNAMIX_MESSAGE0_DECL(export, message_name, method_name, return_type, constness, unicast ) \
    /* step 4: message function -> the one that will be called for the objects */ \
    export return_type method_name(constness ::dynamix::object& _d_obj ); \
    /* also define a pointer function */ \
    export return_type method_name(constness ::dynamix::object* _d_obj ); \

#define I_DYNAMIX_MESSAGE0_MULTI(export, message_name, method_name, return_type, constness ) \
    I_DYNAMIX_MESSAGE0_DECL(export, message_name, method_name, return_type, constness, unicast ) \
    /* step 4: define the message functions -> the one that will be called for the objects */ \
    /* function A: concrete combinator */ \
    template <typename Combinator> \
    void method_name(constness ::dynamix::object& , Combinator& ) \
    { \
        constexpr bool dependent_always_false = sizeof(Combinator) == 0; \
        static_assert(dependent_always_false, "Sadly split message macros don't support combinator calls"); \
    } \
    /* function B: template combinator -> can be called on a single line */ \
    template <template <typename> class Combinator> \
    [[noreturn]] typename Combinator<return_type>::result_type method_name(constness ::dynamix::object& ) \
    { \
        constexpr bool dependent_always_false = sizeof(Combinator<return_type>) == 0; \
        static_assert(dependent_always_false, "Sadly split message macros don't support combinator calls"); \
    } \
    /* function C: no combinator */ \
    export void method_name(constness ::dynamix::object& _d_obj ); \
    /* also define a pointer function with no combinator */ \
    export void method_name(constness ::dynamix::object* _d_obj );

#else

#define I_DYNAMIX_MESSAGE0_UNI(export, message_name, method_name, return_type, constness ) \
    I_DYNAMIX_MESSAGE0_DECL(export, message_name, method_name, return_type, constness, unicast ) \
    /* step 4: define the message function -> the one that will be called for the objects */ \
    export return_type method_name(constness ::dynamix::object& _d_obj ) \
    {\
        return I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(_d_obj ); \
    }\
    /* also define a pointer function */ \
    export return_type method_name(constness ::dynamix::object* _d_obj ) \
    {\
        return I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(*_d_obj ); \
    }\

#define I_DYNAMIX_MESSAGE0_MULTI(export, message_name, method_name, return_type, constness ) \
    I_DYNAMIX_MESSAGE0_DECL(export, message_name, method_name, return_type, constness, multicast ) \
    /* step 4: define the message functions -> the one that will be called for the objects */ \
    /* sadly combinator calls cannot work with split message macros */ \
    /* function C: no combinator */ \
    export void method_name(constness ::dynamix::object& _d_obj ) \
    { \
        /* not forwarded arguments. We DO want an error if some of them are rvalue references */ \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(_d_obj ); \
    } \
    /* also define a pointer function with no combinator */ \
    export void method_name(constness ::dynamix::object* _d_obj ) \
    {\
        /* not forwarded arguments. We DO want an error if some of them are rvalue references */ \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(*_d_obj ); \
    }\

#endif

#define I_DYNAMIX_MESSAGE1_DECL(export, message_name, method_name, return_type, constness, message_mechanism , arg0_type, a0) \
    /* mechanism shows whether it's a multicast or unicast */ \
    \
    /* step 1: define the message struct */ \
    struct export I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name) : public ::dynamix::internal::I_DYNAMIX_MESSAGE_CALLER_STRUCT(message_mechanism) \
        <I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name), constness ::dynamix::object, return_type , arg0_type> \
    { \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)() \
            : I_DYNAMIX_MESSAGE_CALLER_STRUCT(message_mechanism)(I_DYNAMIX_PP_STRINGIZE(message_name)) \
        {} \
        template <typename Mixin> \
        ::dynamix::internal::func_ptr get_caller_for() const \
        { \
            /* prevent the linker from optimizing away the caller function */ \
            static caller_func the_caller = [](void* _d_mixin , arg0_type a0) -> return_type \
            { \
                constness Mixin* _d_m = reinterpret_cast<Mixin*>(_d_mixin); \
                return _d_m->method_name(std::forward<arg0_type>(a0)); \
            }; \
            /* cast the caller to a void (*)() - safe according to the standard */ \
            return reinterpret_cast< ::dynamix::internal::func_ptr>(the_caller); \
        } \
    }; \
    /* step 2: define a message tag, that will be used to identify the message in feature lists */ \
    /* it would have been nice if we could set this global variable to the unique global instance of the feature*/ \
    /* but unfortunately we cannot trust dynamic libraries to keep it straight for us */ \
    /* hence we rely on a getter like the mixin one */ \
    extern export I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name) * I_DYNAMIX_MESSAGE_TAG(message_name); \
    /* step 3: declare the feature getter and manual registrator for the message */ \
    extern export ::dynamix::feature& _dynamix_get_mixin_feature_safe(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \
    extern export const ::dynamix::feature& _dynamix_get_mixin_feature_fast(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \
    extern export void _dynamix_register_mixin_feature(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \

#if !defined(DYNAMIX_SPLIT_MESSAGE_DEFINE)

#define I_DYNAMIX_MESSAGE1_UNI(export, message_name, method_name, return_type, constness , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0) \
    /* step 4: message function -> the one that will be called for the objects */ \
    export return_type method_name(constness ::dynamix::object& _d_obj , arg0_type a0); \
    /* also define a pointer function */ \
    export return_type method_name(constness ::dynamix::object* _d_obj , arg0_type a0); \

#define I_DYNAMIX_MESSAGE1_MULTI(export, message_name, method_name, return_type, constness , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0) \
    /* step 4: define the message functions -> the one that will be called for the objects */ \
    /* function A: concrete combinator */ \
    template <typename Combinator> \
    void method_name(constness ::dynamix::object& , arg0_type, Combinator& ) \
    { \
        constexpr bool dependent_always_false = sizeof(Combinator) == 0; \
        static_assert(dependent_always_false, "Sadly split message macros don't support combinator calls"); \
    } \
    /* function B: template combinator -> can be called on a single line */ \
    template <template <typename> class Combinator> \
    [[noreturn]] typename Combinator<return_type>::result_type method_name(constness ::dynamix::object& , arg0_type) \
    { \
        constexpr bool dependent_always_false = sizeof(Combinator<return_type>) == 0; \
        static_assert(dependent_always_false, "Sadly split message macros don't support combinator calls"); \
    } \
    /* function C: no combinator */ \
    export void method_name(constness ::dynamix::object& _d_obj , arg0_type a0); \
    /* also define a pointer function with no combinator */ \
    export void method_name(constness ::dynamix::object* _d_obj , arg0_type a0);

#else

#define I_DYNAMIX_MESSAGE1_UNI(export, message_name, method_name, return_type, constness , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0) \
    /* step 4: define the message function -> the one that will be called for the objects */ \
    export return_type method_name(constness ::dynamix::object& _d_obj , arg0_type a0) \
    {\
        return I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(_d_obj , std::forward<arg0_type>(a0)); \
    }\
    /* also define a pointer function */ \
    export return_type method_name(constness ::dynamix::object* _d_obj , arg0_type a0) \
    {\
        return I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(*_d_obj , std::forward<arg0_type>(a0)); \
    }\

#define I_DYNAMIX_MESSAGE1_MULTI(export, message_name, method_name, return_type, constness , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_DECL(export, message_name, method_name, return_type, constness, multicast , arg0_type, a0) \
    /* step 4: define the message functions -> the one that will be called for the objects */ \
    /* sadly combinator calls cannot work with split message macros */ \
    /* function C: no combinator */ \
    export void method_name(constness ::dynamix::object& _d_obj , arg0_type a0) \
    { \
        /* not forwarded arguments. We DO want an error if some of them are rvalue references */ \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(_d_obj , a0); \
    } \
    /* also define a pointer function with no combinator */ \
    export void method_name(constness ::dynamix::object* _d_obj , arg0_type a0) \
    {\
        /* not forwarded arguments. We DO want an error if some of them are rvalue references */ \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(*_d_obj , a0); \
    }\

#endif

#define I_DYNAMIX_MESSAGE2_DECL(export, message_name, method_name, return_type, constness, message_mechanism , arg0_type, a0, arg1_type, a1) \
    /* mechanism shows whether it's a multicast or unicast */ \
    \
    /* step 1: define the message struct */ \
    struct export I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name) : public ::dynamix::internal::I_DYNAMIX_MESSAGE_CALLER_STRUCT(message_mechanism) \
        <I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name), constness ::dynamix::object, return_type , arg0_type, arg1_type> \
    { \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)() \
            : I_DYNAMIX_MESSAGE_CALLER_STRUCT(message_mechanism)(I_DYNAMIX_PP_STRINGIZE(message_name)) \
        {} \
        template <typename Mixin> \
        ::dynamix::internal::func_ptr get_caller_for() const \
        { \
            /* prevent the linker from optimizing away the caller function */ \
            static caller_func the_caller = [](void* _d_mixin , arg0_type a0, arg1_type a1) -> return_type \
            { \
                constness Mixin* _d_m = reinterpret_cast<Mixin*>(_d_mixin); \
                return _d_m->method_name(std::forward<arg0_type>(a0), std::forward<arg1_type>(a1)); \
            }; \
            /* cast the caller to a void (*)() - safe according to the standard */ \
            return reinterpret_cast< ::dynamix::internal::func_ptr>(the_caller); \
        } \
    }; \
    /* step 2: define a message tag, that will be used to identify the message in feature lists */ \
    /* it would have been nice if we could set this global variable to the unique global instance of the feature*/ \
    /* but unfortunately we cannot trust dynamic libraries to keep it straight for us */ \
    /* hence we rely on a getter like the mixin one */ \
    extern export I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name) * I_DYNAMIX_MESSAGE_TAG(message_name); \
    /* step 3: declare the feature getter and manual registrator for the message */ \
    extern export ::dynamix::feature& _dynamix_get_mixin_feature_safe(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \
    extern export const ::dynamix::feature& _dynamix_get_mixin_feature_fast(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \
    extern export void _dynamix_register_mixin_feature(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \

#if !defined(DYNAMIX_SPLIT_MESSAGE_DEFINE)

#define I_DYNAMIX_MESSAGE2_UNI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0, arg1_type, a1) \
    /* step 4: message function -> the one that will be called for the objects */ \
    export return_type method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1); \
    /* also define a pointer function */ \
    export return_type method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1); \

#define I_DYNAMIX_MESSAGE2_MULTI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0, arg1_type, a1) \
    /* step 4: define the message functions -> the one that will be called for the objects */ \
    /* function A: concrete combinator */ \
    template <typename Combinator> \
    void method_name(constness ::dynamix::object& , arg0_type, arg1_type, Combinator& ) \
    { \
        constexpr bool dependent_always_false = sizeof(Combinator) == 0; \
        static_assert(dependent_always_false, "Sadly split message macros don't support combinator calls"); \
    } \
    /* function B: template combinator -> can be called on a single line */ \
    template <template <typename> class Combinator> \
    [[noreturn]] typename Combinator<return_type>::result_type method_name(constness ::dynamix::object& , arg0_type, arg1_type) \
    { \
        constexpr bool dependent_always_false = sizeof(Combinator<return_type>) == 0; \
        static_assert(dependent_always_false, "Sadly split message macros don't support combinator calls"); \
    } \
    /* function C: no combinator */ \
    export void method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1); \
    /* also define a pointer function with no combinator */ \
    export void method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1);

#else

#define I_DYNAMIX_MESSAGE2_UNI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0, arg1_type, a1) \
    /* step 4: define the message function -> the one that will be called for the objects */ \
    export return_type method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1) \
    {\
        return I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(_d_obj , std::forward<arg0_type>(a0), std::forward<arg1_type>(a1)); \
    }\
    /* also define a pointer function */ \
    export return_type method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1) \
    {\
        return I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(*_d_obj , std::forward<arg0_type>(a0), std::forward<arg1_type>(a1)); \
    }\

#define I_DYNAMIX_MESSAGE2_MULTI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_DECL(export, message_name, method_name, return_type, constness, multicast , arg0_type, a0, arg1_type, a1) \
    /* step 4: define the message functions -> the one that will be called for the objects */ \
    /* sadly combinator calls cannot work with split message macros */ \
    /* function C: no combinator */ \
    export void method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1) \
    { \
        /* not forwarded arguments. We DO want an error if some of them are rvalue references */ \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(_d_obj , a0, a1); \
    } \
    /* also define a pointer function with no combinator */ \
    export void method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1) \
    {\
        /* not forwarded arguments. We DO want an error if some of them are rvalue references */ \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(*_d_obj , a0, a1); \
    }\

#endif

#define I_DYNAMIX_MESSAGE3_DECL(export, message_name, method_name, return_type, constness, message_mechanism , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    /* mechanism shows whether it's a multicast or unicast */ \
    \
    /* step 1: define the message struct */ \
    struct export I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name) : public ::dynamix::internal::I_DYNAMIX_MESSAGE_CALLER_STRUCT(message_mechanism) \
        <I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name), constness ::dynamix::object, return_type , arg0_type, arg1_type, arg2_type> \
    { \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)() \
            : I_DYNAMIX_MESSAGE_CALLER_STRUCT(message_mechanism)(I_DYNAMIX_PP_STRINGIZE(message_name)) \
        {} \
        template <typename Mixin> \
        ::dynamix::internal::func_ptr get_caller_for() const \
        { \
            /* prevent the linker from optimizing away the caller function */ \
            static caller_func the_caller = [](void* _d_mixin , arg0_type a0, arg1_type a1, arg2_type a2) -> return_type \
            { \
                constness Mixin* _d_m = reinterpret_cast<Mixin*>(_d_mixin); \
                return _d_m->method_name(std::forward<arg0_type>(a0), std::forward<arg1_type>(a1), std::forward<arg2_type>(a2)); \
            }; \
            /* cast the caller to a void (*)() - safe according to the standard */ \
            return reinterpret_cast< ::dynamix::internal::func_ptr>(the_caller); \
        } \
    }; \
    /* step 2: define a message tag, that will be used to identify the message in feature lists */ \
    /* it would have been nice if we could set this global variable to the unique global instance of the feature*/ \
    /* but unfortunately we cannot trust dynamic libraries to keep it straight for us */ \
    /* hence we rely on a getter like the mixin one */ \
    extern export I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name) * I_DYNAMIX_MESSAGE_TAG(message_name); \
    /* step 3: declare the feature getter and manual registrator for the message */ \
    extern export ::dynamix::feature& _dynamix_get_mixin_feature_safe(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \
    extern export const ::dynamix::feature& _dynamix_get_mixin_feature_fast(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \
    extern export void _dynamix_register_mixin_feature(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \

#if !defined(DYNAMIX_SPLIT_MESSAGE_DEFINE)

#define I_DYNAMIX_MESSAGE3_UNI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    /* step 4: message function -> the one that will be called for the objects */ \
    export return_type method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1, arg2_type a2); \
    /* also define a pointer function */ \
    export return_type method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1, arg2_type a2); \

#define I_DYNAMIX_MESSAGE3_MULTI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    /* step 4: define the message functions -> the one that will be called for the objects */ \
    /* function A: concrete combinator */ \
    template <typename Combinator> \
    void method_name(constness ::dynamix::object& , arg0_type, arg1_type, arg2_type, Combinator& ) \
    { \
        constexpr bool dependent_always_false = sizeof(Combinator) == 0; \
        static_assert(dependent_always_false, "Sadly split message macros don't support combinator calls"); \
    } \
    /* function B: template combinator -> can be called on a single line */ \
    template <template <typename> class Combinator> \
    [[noreturn]] typename Combinator<return_type>::result_type method_name(constness ::dynamix::object& , arg0_type, arg1_type, arg2_type) \
    { \
        constexpr bool dependent_always_false = sizeof(Combinator<return_type>) == 0; \
        static_assert(dependent_always_false, "Sadly split message macros don't support combinator calls"); \
    } \
    /* function C: no combinator */ \
    export void method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1, arg2_type a2); \
    /* also define a pointer function with no combinator */ \
    export void method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1, arg2_type a2);

#else

#define I_DYNAMIX_MESSAGE3_UNI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    /* step 4: define the message function -> the one that will be called for the objects */ \
    export return_type method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1, arg2_type a2) \
    {\
        return I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(_d_obj , std::forward<arg0_type>(a0), std::forward<arg1_type>(a1), std::forward<arg2_type>(a2)); \
    }\
    /* also define a pointer function */ \
    export return_type method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1, arg2_type a2) \
    {\
        return I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(*_d_obj , std::forward<arg0_type>(a0), std::forward<arg1_type>(a1), std::forward<arg2_type>(a2)); \
    }\

#define I_DYNAMIX_MESSAGE3_MULTI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_DECL(export, message_name, method_name, return_type, constness, multicast , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    /* step 4: define the message functions -> the one that will be called for the objects */ \
    /* sadly combinator calls cannot work with split message macros */ \
    /* function C: no combinator */ \
    export void method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1, arg2_type a2) \
    { \
        /* not forwarded arguments. We DO want an error if some of them are rvalue references */ \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(_d_obj , a0, a1, a2); \
    } \
    /* also define a pointer function with no combinator */ \
    export void method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1, arg2_type a2) \
    {\
        /* not forwarded arguments. We DO want an error if some of them are rvalue references */ \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(*_d_obj , a0, a1, a2); \
    }\

#endif

#define I_DYNAMIX_MESSAGE4_DECL(export, message_name, method_name, return_type, constness, message_mechanism , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    /* mechanism shows whether it's a multicast or unicast */ \
    \
    /* step 1: define the message struct */ \
    struct export I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name) : public ::dynamix::internal::I_DYNAMIX_MESSAGE_CALLER_STRUCT(message_mechanism) \
        <I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name), constness ::dynamix::object, return_type , arg0_type, arg1_type, arg2_type, arg3_type> \
    { \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)() \
            : I_DYNAMIX_MESSAGE_CALLER_STRUCT(message_mechanism)(I_DYNAMIX_PP_STRINGIZE(message_name)) \
        {} \
        template <typename Mixin> \
        ::dynamix::internal::func_ptr get_caller_for() const \
        { \
            /* prevent the linker from optimizing away the caller function */ \
            static caller_func the_caller = [](void* _d_mixin , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3) -> return_type \
            { \
                constness Mixin* _d_m = reinterpret_cast<Mixin*>(_d_mixin); \
                return _d_m->method_name(std::forward<arg0_type>(a0), std::forward<arg1_type>(a1), std::forward<arg2_type>(a2), std::forward<arg3_type>(a3)); \
            }; \
            /* cast the caller to a void (*)() - safe according to the standard */ \
            return reinterpret_cast< ::dynamix::internal::func_ptr>(the_caller); \
        } \
    }; \
    /* step 2: define a message tag, that will be used to identify the message in feature lists */ \
    /* it would have been nice if we could set this global variable to the unique global instance of the feature*/ \
    /* but unfortunately we cannot trust dynamic libraries to keep it straight for us */ \
    /* hence we rely on a getter like the mixin one */ \
    extern export I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name) * I_DYNAMIX_MESSAGE_TAG(message_name); \
    /* step 3: declare the feature getter and manual registrator for the message */ \
    extern export ::dynamix::feature& _dynamix_get_mixin_feature_safe(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \
    extern export const ::dynamix::feature& _dynamix_get_mixin_feature_fast(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \
    extern export void _dynamix_register_mixin_feature(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \

#if !defined(DYNAMIX_SPLIT_MESSAGE_DEFINE)

#define I_DYNAMIX_MESSAGE4_UNI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    /* step 4: message function -> the one that will be called for the objects */ \
    export return_type method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3); \
    /* also define a pointer function */ \
    export return_type method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3); \

#define I_DYNAMIX_MESSAGE4_MULTI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    /* step 4: define the message functions -> the one that will be called for the objects */ \
    /* function A: concrete combinator */ \
    template <typename Combinator> \
    void method_name(constness ::dynamix::object& , arg0_type, arg1_type, arg2_type, arg3_type, Combinator& ) \
    { \
        constexpr bool dependent_always_false = sizeof(Combinator) == 0; \
        static_assert(dependent_always_false, "Sadly split message macros don't support combinator calls"); \
    } \
    /* function B: template combinator -> can be called on a single line */ \
    template <template <typename> class Combinator> \
    [[noreturn]] typename Combinator<return_type>::result_type method_name(constness ::dynamix::object& , arg0_type, arg1_type, arg2_type, arg3_type) \
    { \
        constexpr bool dependent_always_false = sizeof(Combinator<return_type>) == 0; \
        static_assert(dependent_always_false, "Sadly split message macros don't support combinator calls"); \
    } \
    /* function C: no combinator */ \
    export void method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3); \
    /* also define a pointer function with no combinator */ \
    export void method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3);

#else

#define I_DYNAMIX_MESSAGE4_UNI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    /* step 4: define the message function -> the one that will be called for the objects */ \
    export return_type method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3) \
    {\
        return I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(_d_obj , std::forward<arg0_type>(a0), std::forward<arg1_type>(a1), std::forward<arg2_type>(a2), std::forward<arg3_type>(a3)); \
    }\
    /* also define a pointer function */ \
    export return_type method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3) \
    {\
        return I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(*_d_obj , std::forward<arg0_type>(a0), std::forward<arg1_type>(a1), std::forward<arg2_type>(a2), std::forward<arg3_type>(a3)); \
    }\

#define I_DYNAMIX_MESSAGE4_MULTI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_DECL(export, message_name, method_name, return_type, constness, multicast , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    /* step 4: define the message functions -> the one that will be called for the objects */ \
    /* sadly combinator calls cannot work with split message macros */ \
    /* function C: no combinator */ \
    export void method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3) \
    { \
        /* not forwarded arguments. We DO want an error if some of them are rvalue references */ \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(_d_obj , a0, a1, a2, a3); \
    } \
    /* also define a pointer function with no combinator */ \
    export void method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3) \
    {\
        /* not forwarded arguments. We DO want an error if some of them are rvalue references */ \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(*_d_obj , a0, a1, a2, a3); \
    }\

#endif

#define I_DYNAMIX_MESSAGE5_DECL(export, message_name, method_name, return_type, constness, message_mechanism , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    /* mechanism shows whether it's a multicast or unicast */ \
    \
    /* step 1: define the message struct */ \
    struct export I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name) : public ::dynamix::internal::I_DYNAMIX_MESSAGE_CALLER_STRUCT(message_mechanism) \
        <I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name), constness ::dynamix::object, return_type , arg0_type, arg1_type, arg2_type, arg3_type, arg4_type> \
    { \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)() \
            : I_DYNAMIX_MESSAGE_CALLER_STRUCT(message_mechanism)(I_DYNAMIX_PP_STRINGIZE(message_name)) \
        {} \
        template <typename Mixin> \
        ::dynamix::internal::func_ptr get_caller_for() const \
        { \
            /* prevent the linker from optimizing away the caller function */ \
            static caller_func the_caller = [](void* _d_mixin , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4) -> return_type \
            { \
                constness Mixin* _d_m = reinterpret_cast<Mixin*>(_d_mixin); \
                return _d_m->method_name(std::forward<arg0_type>(a0), std::forward<arg1_type>(a1), std::forward<arg2_type>(a2), std::forward<arg3_type>(a3), std::forward<arg4_type>(a4)); \
            }; \
            /* cast the caller to a void (*)() - safe according to the standard */ \
            return reinterpret_cast< ::dynamix::internal::func_ptr>(the_caller); \
        } \
    }; \
    /* step 2: define a message tag, that will be used to identify the message in feature lists */ \
    /* it would have been nice if we could set this global variable to the unique global instance of the feature*/ \
    /* but unfortunately we cannot trust dynamic libraries to keep it straight for us */ \
    /* hence we rely on a getter like the mixin one */ \
    extern export I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name) * I_DYNAMIX_MESSAGE_TAG(message_name); \
    /* step 3: declare the feature getter and manual registrator for the message */ \
    extern export ::dynamix::feature& _dynamix_get_mixin_feature_safe(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \
    extern export const ::dynamix::feature& _dynamix_get_mixin_feature_fast(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \
    extern export void _dynamix_register_mixin_feature(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \

#if !defined(DYNAMIX_SPLIT_MESSAGE_DEFINE)

#define I_DYNAMIX_MESSAGE5_UNI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    /* step 4: message function -> the one that will be called for the objects */ \
    export return_type method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4); \
    /* also define a pointer function */ \
    export return_type method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4); \

#define I_DYNAMIX_MESSAGE5_MULTI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    /* step 4: define the message functions -> the one that will be called for the objects */ \
    /* function A: concrete combinator */ \
    template <typename Combinator> \
    void method_name(constness ::dynamix::object& , arg0_type, arg1_type, arg2_type, arg3_type, arg4_type, Combinator& ) \
    { \
        constexpr bool dependent_always_false = sizeof(Combinator) == 0; \
        static_assert(dependent_always_false, "Sadly split message macros don't support combinator calls"); \
    } \
    /* function B: template combinator -> can be called on a single line */ \
    template <template <typename> class Combinator> \
    [[noreturn]] typename Combinator<return_type>::result_type method_name(constness ::dynamix::object& , arg0_type, arg1_type, arg2_type, arg3_type, arg4_type) \
    { \
        constexpr bool dependent_always_false = sizeof(Combinator<return_type>) == 0; \
        static_assert(dependent_always_false, "Sadly split message macros don't support combinator calls"); \
    } \
    /* function C: no combinator */ \
    export void method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4); \
    /* also define a pointer function with no combinator */ \
    export void method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4);

#else

#define I_DYNAMIX_MESSAGE5_UNI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    /* step 4: define the message function -> the one that will be called for the objects */ \
    export return_type method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4) \
    {\
        return I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(_d_obj , std::forward<arg0_type>(a0), std::forward<arg1_type>(a1), std::forward<arg2_type>(a2), std::forward<arg3_type>(a3), std::forward<arg4_type>(a4)); \
    }\
    /* also define a pointer function */ \
    export return_type method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4) \
    {\
        return I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(*_d_obj , std::forward<arg0_type>(a0), std::forward<arg1_type>(a1), std::forward<arg2_type>(a2), std::forward<arg3_type>(a3), std::forward<arg4_type>(a4)); \
    }\

#define I_DYNAMIX_MESSAGE5_MULTI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_DECL(export, message_name, method_name, return_type, constness, multicast , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    /* step 4: define the message functions -> the one that will be called for the objects */ \
    /* sadly combinator calls cannot work with split message macros */ \
    /* function C: no combinator */ \
    export void method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4) \
    { \
        /* not forwarded arguments. We DO want an error if some of them are rvalue references */ \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(_d_obj , a0, a1, a2, a3, a4); \
    } \
    /* also define a pointer function with no combinator */ \
    export void method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4) \
    {\
        /* not forwarded arguments. We DO want an error if some of them are rvalue references */ \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(*_d_obj , a0, a1, a2, a3, a4); \
    }\

#endif

#define I_DYNAMIX_MESSAGE6_DECL(export, message_name, method_name, return_type, constness, message_mechanism , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    /* mechanism shows whether it's a multicast or unicast */ \
    \
    /* step 1: define the message struct */ \
    struct export I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name) : public ::dynamix::internal::I_DYNAMIX_MESSAGE_CALLER_STRUCT(message_mechanism) \
        <I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name), constness ::dynamix::object, return_type , arg0_type, arg1_type, arg2_type, arg3_type, arg4_type, arg5_type> \
    { \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)() \
            : I_DYNAMIX_MESSAGE_CALLER_STRUCT(message_mechanism)(I_DYNAMIX_PP_STRINGIZE(message_name)) \
        {} \
        template <typename Mixin> \
        ::dynamix::internal::func_ptr get_caller_for() const \
        { \
            /* prevent the linker from optimizing away the caller function */ \
            static caller_func the_caller = [](void* _d_mixin , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5) -> return_type \
            { \
                constness Mixin* _d_m = reinterpret_cast<Mixin*>(_d_mixin); \
                return _d_m->method_name(std::forward<arg0_type>(a0), std::forward<arg1_type>(a1), std::forward<arg2_type>(a2), std::forward<arg3_type>(a3), std::forward<arg4_type>(a4), std::forward<arg5_type>(a5)); \
            }; \
            /* cast the caller to a void (*)() - safe according to the standard */ \
            return reinterpret_cast< ::dynamix::internal::func_ptr>(the_caller); \
        } \
    }; \
    /* step 2: define a message tag, that will be used to identify the message in feature lists */ \
    /* it would have been nice if we could set this global variable to the unique global instance of the feature*/ \
    /* but unfortunately we cannot trust dynamic libraries to keep it straight for us */ \
    /* hence we rely on a getter like the mixin one */ \
    extern export I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name) * I_DYNAMIX_MESSAGE_TAG(message_name); \
    /* step 3: declare the feature getter and manual registrator for the message */ \
    extern export ::dynamix::feature& _dynamix_get_mixin_feature_safe(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \
    extern export const ::dynamix::feature& _dynamix_get_mixin_feature_fast(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \
    extern export void _dynamix_register_mixin_feature(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*); \

#if !defined(DYNAMIX_SPLIT_MESSAGE_DEFINE)

#define I_DYNAMIX_MESSAGE6_UNI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    /* step 4: message function -> the one that will be called for the objects */ \
    export return_type method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5); \
    /* also define a pointer function */ \
    export return_type method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5); \

#define I_DYNAMIX_MESSAGE6_MULTI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    /* step 4: define the message functions -> the one that will be called for the objects */ \
    /* function A: concrete combinator */ \
    template <typename Combinator> \
    void method_name(constness ::dynamix::object& , arg0_type, arg1_type, arg2_type, arg3_type, arg4_type, arg5_type, Combinator& ) \
    { \
        constexpr bool dependent_always_false = sizeof(Combinator) == 0; \
        static_assert(dependent_always_false, "Sadly split message macros don't support combinator calls"); \
    } \
    /* function B: template combinator -> can be called on a single line */ \
    template <template <typename> class Combinator> \
    [[noreturn]] typename Combinator<return_type>::result_type method_name(constness ::dynamix::object& , arg0_type, arg1_type, arg2_type, arg3_type, arg4_type, arg5_type) \
    { \
        constexpr bool dependent_always_false = sizeof(Combinator<return_type>) == 0; \
        static_assert(dependent_always_false, "Sadly split message macros don't support combinator calls"); \
    } \
    /* function C: no combinator */ \
    export void method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5); \
    /* also define a pointer function with no combinator */ \
    export void method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5);

#else

#define I_DYNAMIX_MESSAGE6_UNI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_DECL(export, message_name, method_name, return_type, constness, unicast , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    /* step 4: define the message function -> the one that will be called for the objects */ \
    export return_type method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5) \
    {\
        return I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(_d_obj , std::forward<arg0_type>(a0), std::forward<arg1_type>(a1), std::forward<arg2_type>(a2), std::forward<arg3_type>(a3), std::forward<arg4_type>(a4), std::forward<arg5_type>(a5)); \
    }\
    /* also define a pointer function */ \
    export return_type method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5) \
    {\
        return I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(*_d_obj , std::forward<arg0_type>(a0), std::forward<arg1_type>(a1), std::forward<arg2_type>(a2), std::forward<arg3_type>(a3), std::forward<arg4_type>(a4), std::forward<arg5_type>(a5)); \
    }\

#define I_DYNAMIX_MESSAGE6_MULTI(export, message_name, method_name, return_type, constness , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_DECL(export, message_name, method_name, return_type, constness, multicast , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    /* step 4: define the message functions -> the one that will be called for the objects */ \
    /* sadly combinator calls cannot work with split message macros */ \
    /* function C: no combinator */ \
    export void method_name(constness ::dynamix::object& _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5) \
    { \
        /* not forwarded arguments. We DO want an error if some of them are rvalue references */ \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(_d_obj , a0, a1, a2, a3, a4, a5); \
    } \
    /* also define a pointer function with no combinator */ \
    export void method_name(constness ::dynamix::object* _d_obj , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5) \
    {\
        /* not forwarded arguments. We DO want an error if some of them are rvalue references */ \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)::make_call(*_d_obj , a0, a1, a2, a3, a4, a5); \
    }\

#endif
#include "arity_message_macros.ipp"
