// DynaMix
// Copyright (c) 2013-2018 Borislav Stanimirov, Zahary Karadjov
//
// Distributed under the MIT Software License
// See accompanying file LICENSE.txt or copy at
// https://opensource.org/licenses/MIT
//
// this file is automatically generated by a script
//

#include <limits>

#define DYNAMIX_MESSAGE_0(return_type, message ) \
    I_DYNAMIX_MESSAGE0_UNI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, I_DYNAMIX_PP_EMPTY() )

#define DYNAMIX_CONST_MESSAGE_0(return_type, message ) \
    I_DYNAMIX_MESSAGE0_UNI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, const )

#define DYNAMIX_MULTICAST_MESSAGE_0(return_type, message ) \
    I_DYNAMIX_MESSAGE0_MULTI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, I_DYNAMIX_PP_EMPTY() )

#define DYNAMIX_CONST_MULTICAST_MESSAGE_0(return_type, message ) \
    I_DYNAMIX_MESSAGE0_MULTI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, const )

#define DYNAMIX_EXPORTED_MESSAGE_0(export, return_type, message ) \
    I_DYNAMIX_MESSAGE0_UNI(export, message, message, return_type, I_DYNAMIX_PP_EMPTY() )

#define DYNAMIX_EXPORTED_CONST_MESSAGE_0(export, return_type, message ) \
    I_DYNAMIX_MESSAGE0_UNI(export, message, message, return_type, const )

#define DYNAMIX_EXPORTED_MULTICAST_MESSAGE_0(export, return_type, message ) \
    I_DYNAMIX_MESSAGE0_MULTI(export, message, message, return_type, I_DYNAMIX_PP_EMPTY() )

#define DYNAMIX_EXPORTED_CONST_MULTICAST_MESSAGE_0(export, return_type, message ) \
    I_DYNAMIX_MESSAGE0_MULTI(export, message, message, return_type, const )

#define DYNAMIX_MESSAGE_0_OVERLOAD(message_name, return_type, method_name ) \
    I_DYNAMIX_MESSAGE0_UNI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() )

#define DYNAMIX_CONST_MESSAGE_0_OVERLOAD(message_name, return_type, method_name ) \
    I_DYNAMIX_MESSAGE0_UNI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, const )

#define DYNAMIX_MULTICAST_MESSAGE_0_OVERLOAD(message_name, return_type, method_name ) \
    I_DYNAMIX_MESSAGE0_MULTI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() )

#define DYNAMIX_CONST_MULTICAST_MESSAGE_0_OVERLOAD(message_name, return_type, method_name ) \
    I_DYNAMIX_MESSAGE0_MULTI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, const )

#define DYNAMIX_EXPORTED_MESSAGE_0_OVERLOAD(export, message_name, return_type, method_name ) \
    I_DYNAMIX_MESSAGE0_UNI(export, message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() )

#define DYNAMIX_EXPORTED_CONST_MESSAGE_0_OVERLOAD(export, message_name, return_type, method_name ) \
    I_DYNAMIX_MESSAGE0_UNI(export, message_name, method_name, return_type, const )

#define DYNAMIX_EXPORTED_MULTICAST_MESSAGE_0_OVERLOAD(export, message_name, return_type, method_name ) \
    I_DYNAMIX_MESSAGE0_MULTI(export, message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() )

#define DYNAMIX_EXPORTED_CONST_MULTICAST_MESSAGE_0_OVERLOAD(export, message_name, return_type, method_name ) \
    I_DYNAMIX_MESSAGE0_MULTI(export, message_name, method_name, return_type, const )

#define DYNAMIX_DEFINE_MESSAGE_0_WITH_DEFAULT_IMPL(return_type, message_name ) \
    /* standard message definition */ \
    struct DYNAMIX_DEFAULT_IMPL_STRUCT(message_name) \
    { \
        return_type impl(); \
        static return_type caller(void* self ) \
        { \
            return reinterpret_cast<DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)*>(self)->impl(); \
        } \
    }; \
    /* create feature getters for the message */ \
    ::dynamix::feature& _dynamix_get_mixin_feature_safe(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        return ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_safe(); \
    } \
    const ::dynamix::feature& _dynamix_get_mixin_feature_fast(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        return ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_fast(); \
    } \
    /* create a feature registrator */ \
    void _dynamix_register_mixin_feature(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)& msg = ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_safe(); \
        ::dynamix::internal::domain::safe_instance().register_feature(msg); \
        \
        /* set message default implementation data */ \
        static ::dynamix::internal::message_for_mixin default_impl = { \
            &msg, \
            reinterpret_cast<::dynamix::internal::func_ptr>(&DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)::caller), \
            ::std::numeric_limits<int>::min(), \
            ::std::numeric_limits<int>::min(), \
        }; \
        msg.default_impl_data = &default_impl; \
    } \
    /* provide a tag instance */ \
    I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)* I_DYNAMIX_MESSAGE_TAG(message_name); \
    /* instantiate metafunction initializator in case no class registers the message */ \
    inline void _dynamix_register_message(I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        ::dynamix::internal::message_registrator<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::registrator.unused = true; \
    } \
    /* begin default impl function so the used can just enter it after the macro */ \
    return_type DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)::impl()

#define DYNAMIX_MESSAGE_1(return_type, message , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_UNI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0)

#define DYNAMIX_CONST_MESSAGE_1(return_type, message , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_UNI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, const , arg0_type, a0)

#define DYNAMIX_MULTICAST_MESSAGE_1(return_type, message , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_MULTI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0)

#define DYNAMIX_CONST_MULTICAST_MESSAGE_1(return_type, message , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_MULTI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, const , arg0_type, a0)

#define DYNAMIX_EXPORTED_MESSAGE_1(export, return_type, message , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_UNI(export, message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0)

#define DYNAMIX_EXPORTED_CONST_MESSAGE_1(export, return_type, message , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_UNI(export, message, message, return_type, const , arg0_type, a0)

#define DYNAMIX_EXPORTED_MULTICAST_MESSAGE_1(export, return_type, message , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_MULTI(export, message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0)

#define DYNAMIX_EXPORTED_CONST_MULTICAST_MESSAGE_1(export, return_type, message , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_MULTI(export, message, message, return_type, const , arg0_type, a0)

#define DYNAMIX_MESSAGE_1_OVERLOAD(message_name, return_type, method_name , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_UNI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0)

#define DYNAMIX_CONST_MESSAGE_1_OVERLOAD(message_name, return_type, method_name , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_UNI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, const , arg0_type, a0)

#define DYNAMIX_MULTICAST_MESSAGE_1_OVERLOAD(message_name, return_type, method_name , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_MULTI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0)

#define DYNAMIX_CONST_MULTICAST_MESSAGE_1_OVERLOAD(message_name, return_type, method_name , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_MULTI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, const , arg0_type, a0)

#define DYNAMIX_EXPORTED_MESSAGE_1_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_UNI(export, message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0)

#define DYNAMIX_EXPORTED_CONST_MESSAGE_1_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_UNI(export, message_name, method_name, return_type, const , arg0_type, a0)

#define DYNAMIX_EXPORTED_MULTICAST_MESSAGE_1_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_MULTI(export, message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0)

#define DYNAMIX_EXPORTED_CONST_MULTICAST_MESSAGE_1_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0) \
    I_DYNAMIX_MESSAGE1_MULTI(export, message_name, method_name, return_type, const , arg0_type, a0)

#define DYNAMIX_DEFINE_MESSAGE_1_WITH_DEFAULT_IMPL(return_type, message_name , arg0_type, a0) \
    /* standard message definition */ \
    struct DYNAMIX_DEFAULT_IMPL_STRUCT(message_name) \
    { \
        return_type impl(arg0_type a0); \
        static return_type caller(void* self , arg0_type a0) \
        { \
            return reinterpret_cast<DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)*>(self)->impl(std::forward<arg0_type>(a0)); \
        } \
    }; \
    /* create feature getters for the message */ \
    ::dynamix::feature& _dynamix_get_mixin_feature_safe(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        return ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_safe(); \
    } \
    const ::dynamix::feature& _dynamix_get_mixin_feature_fast(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        return ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_fast(); \
    } \
    /* create a feature registrator */ \
    void _dynamix_register_mixin_feature(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)& msg = ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_safe(); \
        ::dynamix::internal::domain::safe_instance().register_feature(msg); \
        \
        /* set message default implementation data */ \
        static ::dynamix::internal::message_for_mixin default_impl = { \
            &msg, \
            reinterpret_cast<::dynamix::internal::func_ptr>(&DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)::caller), \
            ::std::numeric_limits<int>::min(), \
            ::std::numeric_limits<int>::min(), \
        }; \
        msg.default_impl_data = &default_impl; \
    } \
    /* provide a tag instance */ \
    I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)* I_DYNAMIX_MESSAGE_TAG(message_name); \
    /* instantiate metafunction initializator in case no class registers the message */ \
    inline void _dynamix_register_message(I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        ::dynamix::internal::message_registrator<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::registrator.unused = true; \
    } \
    /* begin default impl function so the used can just enter it after the macro */ \
    return_type DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)::impl(arg0_type a0)

#define DYNAMIX_MESSAGE_2(return_type, message , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_UNI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1)

#define DYNAMIX_CONST_MESSAGE_2(return_type, message , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_UNI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, const , arg0_type, a0, arg1_type, a1)

#define DYNAMIX_MULTICAST_MESSAGE_2(return_type, message , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_MULTI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1)

#define DYNAMIX_CONST_MULTICAST_MESSAGE_2(return_type, message , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_MULTI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, const , arg0_type, a0, arg1_type, a1)

#define DYNAMIX_EXPORTED_MESSAGE_2(export, return_type, message , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_UNI(export, message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1)

#define DYNAMIX_EXPORTED_CONST_MESSAGE_2(export, return_type, message , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_UNI(export, message, message, return_type, const , arg0_type, a0, arg1_type, a1)

#define DYNAMIX_EXPORTED_MULTICAST_MESSAGE_2(export, return_type, message , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_MULTI(export, message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1)

#define DYNAMIX_EXPORTED_CONST_MULTICAST_MESSAGE_2(export, return_type, message , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_MULTI(export, message, message, return_type, const , arg0_type, a0, arg1_type, a1)

#define DYNAMIX_MESSAGE_2_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_UNI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1)

#define DYNAMIX_CONST_MESSAGE_2_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_UNI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1)

#define DYNAMIX_MULTICAST_MESSAGE_2_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_MULTI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1)

#define DYNAMIX_CONST_MULTICAST_MESSAGE_2_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_MULTI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1)

#define DYNAMIX_EXPORTED_MESSAGE_2_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_UNI(export, message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1)

#define DYNAMIX_EXPORTED_CONST_MESSAGE_2_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_UNI(export, message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1)

#define DYNAMIX_EXPORTED_MULTICAST_MESSAGE_2_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_MULTI(export, message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1)

#define DYNAMIX_EXPORTED_CONST_MULTICAST_MESSAGE_2_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1) \
    I_DYNAMIX_MESSAGE2_MULTI(export, message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1)

#define DYNAMIX_DEFINE_MESSAGE_2_WITH_DEFAULT_IMPL(return_type, message_name , arg0_type, a0, arg1_type, a1) \
    /* standard message definition */ \
    struct DYNAMIX_DEFAULT_IMPL_STRUCT(message_name) \
    { \
        return_type impl(arg0_type a0, arg1_type a1); \
        static return_type caller(void* self , arg0_type a0, arg1_type a1) \
        { \
            return reinterpret_cast<DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)*>(self)->impl(std::forward<arg0_type>(a0), std::forward<arg1_type>(a1)); \
        } \
    }; \
    /* create feature getters for the message */ \
    ::dynamix::feature& _dynamix_get_mixin_feature_safe(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        return ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_safe(); \
    } \
    const ::dynamix::feature& _dynamix_get_mixin_feature_fast(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        return ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_fast(); \
    } \
    /* create a feature registrator */ \
    void _dynamix_register_mixin_feature(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)& msg = ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_safe(); \
        ::dynamix::internal::domain::safe_instance().register_feature(msg); \
        \
        /* set message default implementation data */ \
        static ::dynamix::internal::message_for_mixin default_impl = { \
            &msg, \
            reinterpret_cast<::dynamix::internal::func_ptr>(&DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)::caller), \
            ::std::numeric_limits<int>::min(), \
            ::std::numeric_limits<int>::min(), \
        }; \
        msg.default_impl_data = &default_impl; \
    } \
    /* provide a tag instance */ \
    I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)* I_DYNAMIX_MESSAGE_TAG(message_name); \
    /* instantiate metafunction initializator in case no class registers the message */ \
    inline void _dynamix_register_message(I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        ::dynamix::internal::message_registrator<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::registrator.unused = true; \
    } \
    /* begin default impl function so the used can just enter it after the macro */ \
    return_type DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)::impl(arg0_type a0, arg1_type a1)

#define DYNAMIX_MESSAGE_3(return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_UNI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2)

#define DYNAMIX_CONST_MESSAGE_3(return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_UNI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2)

#define DYNAMIX_MULTICAST_MESSAGE_3(return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_MULTI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2)

#define DYNAMIX_CONST_MULTICAST_MESSAGE_3(return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_MULTI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2)

#define DYNAMIX_EXPORTED_MESSAGE_3(export, return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_UNI(export, message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2)

#define DYNAMIX_EXPORTED_CONST_MESSAGE_3(export, return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_UNI(export, message, message, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2)

#define DYNAMIX_EXPORTED_MULTICAST_MESSAGE_3(export, return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_MULTI(export, message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2)

#define DYNAMIX_EXPORTED_CONST_MULTICAST_MESSAGE_3(export, return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_MULTI(export, message, message, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2)

#define DYNAMIX_MESSAGE_3_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_UNI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2)

#define DYNAMIX_CONST_MESSAGE_3_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_UNI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2)

#define DYNAMIX_MULTICAST_MESSAGE_3_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_MULTI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2)

#define DYNAMIX_CONST_MULTICAST_MESSAGE_3_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_MULTI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2)

#define DYNAMIX_EXPORTED_MESSAGE_3_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_UNI(export, message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2)

#define DYNAMIX_EXPORTED_CONST_MESSAGE_3_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_UNI(export, message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2)

#define DYNAMIX_EXPORTED_MULTICAST_MESSAGE_3_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_MULTI(export, message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2)

#define DYNAMIX_EXPORTED_CONST_MULTICAST_MESSAGE_3_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    I_DYNAMIX_MESSAGE3_MULTI(export, message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2)

#define DYNAMIX_DEFINE_MESSAGE_3_WITH_DEFAULT_IMPL(return_type, message_name , arg0_type, a0, arg1_type, a1, arg2_type, a2) \
    /* standard message definition */ \
    struct DYNAMIX_DEFAULT_IMPL_STRUCT(message_name) \
    { \
        return_type impl(arg0_type a0, arg1_type a1, arg2_type a2); \
        static return_type caller(void* self , arg0_type a0, arg1_type a1, arg2_type a2) \
        { \
            return reinterpret_cast<DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)*>(self)->impl(std::forward<arg0_type>(a0), std::forward<arg1_type>(a1), std::forward<arg2_type>(a2)); \
        } \
    }; \
    /* create feature getters for the message */ \
    ::dynamix::feature& _dynamix_get_mixin_feature_safe(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        return ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_safe(); \
    } \
    const ::dynamix::feature& _dynamix_get_mixin_feature_fast(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        return ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_fast(); \
    } \
    /* create a feature registrator */ \
    void _dynamix_register_mixin_feature(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)& msg = ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_safe(); \
        ::dynamix::internal::domain::safe_instance().register_feature(msg); \
        \
        /* set message default implementation data */ \
        static ::dynamix::internal::message_for_mixin default_impl = { \
            &msg, \
            reinterpret_cast<::dynamix::internal::func_ptr>(&DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)::caller), \
            ::std::numeric_limits<int>::min(), \
            ::std::numeric_limits<int>::min(), \
        }; \
        msg.default_impl_data = &default_impl; \
    } \
    /* provide a tag instance */ \
    I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)* I_DYNAMIX_MESSAGE_TAG(message_name); \
    /* instantiate metafunction initializator in case no class registers the message */ \
    inline void _dynamix_register_message(I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        ::dynamix::internal::message_registrator<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::registrator.unused = true; \
    } \
    /* begin default impl function so the used can just enter it after the macro */ \
    return_type DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)::impl(arg0_type a0, arg1_type a1, arg2_type a2)

#define DYNAMIX_MESSAGE_4(return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_UNI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3)

#define DYNAMIX_CONST_MESSAGE_4(return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_UNI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3)

#define DYNAMIX_MULTICAST_MESSAGE_4(return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_MULTI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3)

#define DYNAMIX_CONST_MULTICAST_MESSAGE_4(return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_MULTI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3)

#define DYNAMIX_EXPORTED_MESSAGE_4(export, return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_UNI(export, message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3)

#define DYNAMIX_EXPORTED_CONST_MESSAGE_4(export, return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_UNI(export, message, message, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3)

#define DYNAMIX_EXPORTED_MULTICAST_MESSAGE_4(export, return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_MULTI(export, message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3)

#define DYNAMIX_EXPORTED_CONST_MULTICAST_MESSAGE_4(export, return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_MULTI(export, message, message, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3)

#define DYNAMIX_MESSAGE_4_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_UNI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3)

#define DYNAMIX_CONST_MESSAGE_4_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_UNI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3)

#define DYNAMIX_MULTICAST_MESSAGE_4_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_MULTI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3)

#define DYNAMIX_CONST_MULTICAST_MESSAGE_4_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_MULTI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3)

#define DYNAMIX_EXPORTED_MESSAGE_4_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_UNI(export, message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3)

#define DYNAMIX_EXPORTED_CONST_MESSAGE_4_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_UNI(export, message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3)

#define DYNAMIX_EXPORTED_MULTICAST_MESSAGE_4_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_MULTI(export, message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3)

#define DYNAMIX_EXPORTED_CONST_MULTICAST_MESSAGE_4_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    I_DYNAMIX_MESSAGE4_MULTI(export, message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3)

#define DYNAMIX_DEFINE_MESSAGE_4_WITH_DEFAULT_IMPL(return_type, message_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3) \
    /* standard message definition */ \
    struct DYNAMIX_DEFAULT_IMPL_STRUCT(message_name) \
    { \
        return_type impl(arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3); \
        static return_type caller(void* self , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3) \
        { \
            return reinterpret_cast<DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)*>(self)->impl(std::forward<arg0_type>(a0), std::forward<arg1_type>(a1), std::forward<arg2_type>(a2), std::forward<arg3_type>(a3)); \
        } \
    }; \
    /* create feature getters for the message */ \
    ::dynamix::feature& _dynamix_get_mixin_feature_safe(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        return ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_safe(); \
    } \
    const ::dynamix::feature& _dynamix_get_mixin_feature_fast(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        return ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_fast(); \
    } \
    /* create a feature registrator */ \
    void _dynamix_register_mixin_feature(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)& msg = ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_safe(); \
        ::dynamix::internal::domain::safe_instance().register_feature(msg); \
        \
        /* set message default implementation data */ \
        static ::dynamix::internal::message_for_mixin default_impl = { \
            &msg, \
            reinterpret_cast<::dynamix::internal::func_ptr>(&DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)::caller), \
            ::std::numeric_limits<int>::min(), \
            ::std::numeric_limits<int>::min(), \
        }; \
        msg.default_impl_data = &default_impl; \
    } \
    /* provide a tag instance */ \
    I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)* I_DYNAMIX_MESSAGE_TAG(message_name); \
    /* instantiate metafunction initializator in case no class registers the message */ \
    inline void _dynamix_register_message(I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        ::dynamix::internal::message_registrator<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::registrator.unused = true; \
    } \
    /* begin default impl function so the used can just enter it after the macro */ \
    return_type DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)::impl(arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3)

#define DYNAMIX_MESSAGE_5(return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_UNI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4)

#define DYNAMIX_CONST_MESSAGE_5(return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_UNI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4)

#define DYNAMIX_MULTICAST_MESSAGE_5(return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_MULTI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4)

#define DYNAMIX_CONST_MULTICAST_MESSAGE_5(return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_MULTI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4)

#define DYNAMIX_EXPORTED_MESSAGE_5(export, return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_UNI(export, message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4)

#define DYNAMIX_EXPORTED_CONST_MESSAGE_5(export, return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_UNI(export, message, message, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4)

#define DYNAMIX_EXPORTED_MULTICAST_MESSAGE_5(export, return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_MULTI(export, message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4)

#define DYNAMIX_EXPORTED_CONST_MULTICAST_MESSAGE_5(export, return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_MULTI(export, message, message, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4)

#define DYNAMIX_MESSAGE_5_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_UNI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4)

#define DYNAMIX_CONST_MESSAGE_5_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_UNI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4)

#define DYNAMIX_MULTICAST_MESSAGE_5_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_MULTI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4)

#define DYNAMIX_CONST_MULTICAST_MESSAGE_5_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_MULTI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4)

#define DYNAMIX_EXPORTED_MESSAGE_5_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_UNI(export, message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4)

#define DYNAMIX_EXPORTED_CONST_MESSAGE_5_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_UNI(export, message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4)

#define DYNAMIX_EXPORTED_MULTICAST_MESSAGE_5_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_MULTI(export, message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4)

#define DYNAMIX_EXPORTED_CONST_MULTICAST_MESSAGE_5_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    I_DYNAMIX_MESSAGE5_MULTI(export, message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4)

#define DYNAMIX_DEFINE_MESSAGE_5_WITH_DEFAULT_IMPL(return_type, message_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4) \
    /* standard message definition */ \
    struct DYNAMIX_DEFAULT_IMPL_STRUCT(message_name) \
    { \
        return_type impl(arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4); \
        static return_type caller(void* self , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4) \
        { \
            return reinterpret_cast<DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)*>(self)->impl(std::forward<arg0_type>(a0), std::forward<arg1_type>(a1), std::forward<arg2_type>(a2), std::forward<arg3_type>(a3), std::forward<arg4_type>(a4)); \
        } \
    }; \
    /* create feature getters for the message */ \
    ::dynamix::feature& _dynamix_get_mixin_feature_safe(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        return ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_safe(); \
    } \
    const ::dynamix::feature& _dynamix_get_mixin_feature_fast(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        return ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_fast(); \
    } \
    /* create a feature registrator */ \
    void _dynamix_register_mixin_feature(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)& msg = ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_safe(); \
        ::dynamix::internal::domain::safe_instance().register_feature(msg); \
        \
        /* set message default implementation data */ \
        static ::dynamix::internal::message_for_mixin default_impl = { \
            &msg, \
            reinterpret_cast<::dynamix::internal::func_ptr>(&DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)::caller), \
            ::std::numeric_limits<int>::min(), \
            ::std::numeric_limits<int>::min(), \
        }; \
        msg.default_impl_data = &default_impl; \
    } \
    /* provide a tag instance */ \
    I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)* I_DYNAMIX_MESSAGE_TAG(message_name); \
    /* instantiate metafunction initializator in case no class registers the message */ \
    inline void _dynamix_register_message(I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        ::dynamix::internal::message_registrator<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::registrator.unused = true; \
    } \
    /* begin default impl function so the used can just enter it after the macro */ \
    return_type DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)::impl(arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4)

#define DYNAMIX_MESSAGE_6(return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_UNI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5)

#define DYNAMIX_CONST_MESSAGE_6(return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_UNI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5)

#define DYNAMIX_MULTICAST_MESSAGE_6(return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_MULTI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5)

#define DYNAMIX_CONST_MULTICAST_MESSAGE_6(return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_MULTI(I_DYNAMIX_PP_EMPTY(), message, message, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5)

#define DYNAMIX_EXPORTED_MESSAGE_6(export, return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_UNI(export, message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5)

#define DYNAMIX_EXPORTED_CONST_MESSAGE_6(export, return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_UNI(export, message, message, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5)

#define DYNAMIX_EXPORTED_MULTICAST_MESSAGE_6(export, return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_MULTI(export, message, message, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5)

#define DYNAMIX_EXPORTED_CONST_MULTICAST_MESSAGE_6(export, return_type, message , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_MULTI(export, message, message, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5)

#define DYNAMIX_MESSAGE_6_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_UNI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5)

#define DYNAMIX_CONST_MESSAGE_6_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_UNI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5)

#define DYNAMIX_MULTICAST_MESSAGE_6_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_MULTI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5)

#define DYNAMIX_CONST_MULTICAST_MESSAGE_6_OVERLOAD(message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_MULTI(I_DYNAMIX_PP_EMPTY(), message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5)

#define DYNAMIX_EXPORTED_MESSAGE_6_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_UNI(export, message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5)

#define DYNAMIX_EXPORTED_CONST_MESSAGE_6_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_UNI(export, message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5)

#define DYNAMIX_EXPORTED_MULTICAST_MESSAGE_6_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_MULTI(export, message_name, method_name, return_type, I_DYNAMIX_PP_EMPTY() , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5)

#define DYNAMIX_EXPORTED_CONST_MULTICAST_MESSAGE_6_OVERLOAD(export, message_name, return_type, method_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    I_DYNAMIX_MESSAGE6_MULTI(export, message_name, method_name, return_type, const , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5)

#define DYNAMIX_DEFINE_MESSAGE_6_WITH_DEFAULT_IMPL(return_type, message_name , arg0_type, a0, arg1_type, a1, arg2_type, a2, arg3_type, a3, arg4_type, a4, arg5_type, a5) \
    /* standard message definition */ \
    struct DYNAMIX_DEFAULT_IMPL_STRUCT(message_name) \
    { \
        return_type impl(arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5); \
        static return_type caller(void* self , arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5) \
        { \
            return reinterpret_cast<DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)*>(self)->impl(std::forward<arg0_type>(a0), std::forward<arg1_type>(a1), std::forward<arg2_type>(a2), std::forward<arg3_type>(a3), std::forward<arg4_type>(a4), std::forward<arg5_type>(a5)); \
        } \
    }; \
    /* create feature getters for the message */ \
    ::dynamix::feature& _dynamix_get_mixin_feature_safe(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        return ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_safe(); \
    } \
    const ::dynamix::feature& _dynamix_get_mixin_feature_fast(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        return ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_fast(); \
    } \
    /* create a feature registrator */ \
    void _dynamix_register_mixin_feature(const I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)& msg = ::dynamix::internal::feature_instance<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::the_feature_safe(); \
        ::dynamix::internal::domain::safe_instance().register_feature(msg); \
        \
        /* set message default implementation data */ \
        static ::dynamix::internal::message_for_mixin default_impl = { \
            &msg, \
            reinterpret_cast<::dynamix::internal::func_ptr>(&DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)::caller), \
            ::std::numeric_limits<int>::min(), \
            ::std::numeric_limits<int>::min(), \
        }; \
        msg.default_impl_data = &default_impl; \
    } \
    /* provide a tag instance */ \
    I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)* I_DYNAMIX_MESSAGE_TAG(message_name); \
    /* instantiate metafunction initializator in case no class registers the message */ \
    inline void _dynamix_register_message(I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)*) \
    { \
        ::dynamix::internal::message_registrator<I_DYNAMIX_MESSAGE_STRUCT_NAME(message_name)>::registrator.unused = true; \
    } \
    /* begin default impl function so the used can just enter it after the macro */ \
    return_type DYNAMIX_DEFAULT_IMPL_STRUCT(message_name)::impl(arg0_type a0, arg1_type a1, arg2_type a2, arg3_type a3, arg4_type a4, arg5_type a5)
